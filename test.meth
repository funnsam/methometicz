def id λx. x

|> church booleans
def true λx y. x
def false λx y. y

|> common operators
def & λx y. (x y false)
def ! λx. (x false true)
def | λx y. (x true y)
def ^ λx y. (x (! y) y)

|> inverted operators
def !& λx y. (! (& x y))
def !| λx y. (! (| x y))
def !^ λx y. (! (^ x y))

|> useful church numeral stuff
def is_zero λn. ((n λx. false) true)
def ++ λa. λb. λc. (b a)
def + λx y. λs. λz. ((x s) ((y s) z))

|> test operators
(print_dbg ((& false false) 1 0))
(print_dbg ((& false true) 1 0))
(print_dbg ((& true false) 1 0))
(print_dbg ((& true true) 1 0))

(print_char 10)

(print_dbg ((! false) 1 0))
(print_dbg ((! true) 1 0))

(print_char 10)

(print_dbg ((| false false) 1 0))
(print_dbg ((| false true) 1 0))
(print_dbg ((| true false) 1 0))
(print_dbg ((| true true) 1 0))

(print_char 10)

(print_dbg ((^ false false) 1 0))
(print_dbg ((^ false true) 1 0))
(print_dbg ((^ true false) 1 0))
(print_dbg ((^ true true) 1 0))

(print_char 10)

(print_dbg ((is_zero (+ 0 0)) 1 0))
